package com.example.diary.domain.mock;

import com.example.diary.domain.member.dto.service.MemberCreateDTO;
import com.example.diary.domain.member.dto.service.MemberInfoDTO;
import com.example.diary.domain.member.dto.service.MemberUpdateDTO;
import com.example.diary.domain.member.infrastructure.entity.MemberEntity;
import com.example.diary.domain.member.model.Member;
import com.example.diary.domain.member.repository.MemberRepository;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

public class FakeMemberRepository implements MemberRepository {
    private Long autoGeneratedId = 0L;
    private final Map<Long, MemberEntity> store = new HashMap<>();

    @Override
    public Member register(MemberCreateDTO dto) {
        MemberEntity entity = new MemberEntity(
                autoGeneratedId+1,
                dto.getEmail(),
                dto.getUsername(),
                dto.getPassword(),
                dto.getRole(),
                LocalDateTime.now(),
                LocalDateTime.now(),
                LocalDateTime.now()
        );

        store.put(++autoGeneratedId, entity);
        return Member.from(entity);
    }

    @Override
    public Optional<Member> findById(Long id) {
        MemberEntity entity = store.get(id);
        if (entity == null) {
            return Optional.empty();
        }

        return Optional.of(
                Member.from(entity)
        );
    }

    @Override
    public Optional<Member> findByEmail(String email) {
        return store.values().stream()
                .filter(memberEntity -> memberEntity.getEmail().equals(email))
                .map(Member::from)
                .findAny();
    }

    @Override
    public Member updateById(Long id, MemberUpdateDTO dto) {
        MemberEntity entity = store.get(id);
        entity.setUsername(dto.getUsername());
        entity.setPassword(dto.getPassword());
        entity.setRole(dto.getRole());
        return Member.from(entity);
    }

    @Override
    public void deleteById(Long id) {
        store.remove(id);
    }
}
