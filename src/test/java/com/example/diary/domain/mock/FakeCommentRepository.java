package com.example.diary.domain.mock;

import com.example.diary.domain.comment.dto.service.CommentCreateDto;
import com.example.diary.domain.comment.infrastructure.entity.CommentEntity;
import com.example.diary.domain.comment.model.Comment;
import com.example.diary.domain.comment.repository.CommentRepository;

import java.time.LocalDateTime;
import java.util.*;

public class FakeCommentRepository implements CommentRepository {
    private Long autoGeneratedId = 0L;
    private final Map<Long, CommentEntity> store = new HashMap<>();
    @Override
    public Comment register(CommentCreateDto dto) {
        CommentEntity entity = new CommentEntity(
                autoGeneratedId+1,
                dto.getSchedule().toEntity(),
                dto.getMember().toEntity(),
                null,
                new LinkedHashSet<>(),
                dto.getContent(),
                LocalDateTime.now(),
                LocalDateTime.now(),
                LocalDateTime.now()
        );

        store.put(++autoGeneratedId, entity);
        return Comment.from(entity);
    }

    @Override
    public Comment registerSubComment(Long parentCommentId, CommentCreateDto dto) {
        CommentEntity parentEntity = store.get(parentCommentId);
        CommentEntity childComment = new CommentEntity(
                autoGeneratedId+1,
                dto.getSchedule().toEntity(),
                dto.getMember().toEntity(),
                null,
                new LinkedHashSet<>(),
                dto.getContent(),
                LocalDateTime.now(),
                LocalDateTime.now(),
                LocalDateTime.now()
        );

        parentEntity.addChildComment(childComment);
        return Comment.from(parentEntity);
    }

    @Override
    public Optional<Comment> findById(Long id) {
        if (store.get(id) == null){
            return Optional.empty();
        }
        return Optional.of(Comment.from(store.get(id)));
    }

    @Override
    public List<Comment> findByMemberId(Long id) {
        return store.values().stream()
                .filter(entity -> entity.getMember().getId().equals(id))
                .map(Comment::from)
                .toList();
    }

    @Override
    public Comment updateById(Long id, String content) {
        CommentEntity entity = store.get(id);
        entity.setContent(content);
        return Comment.from(entity);
    }

    @Override
    public void deleteById(Long id) {
        store.remove(id);
    }
}
